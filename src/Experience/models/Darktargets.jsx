/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 darktargets.glb 
*/

import React, { useRef } from "react";
import { useGLTF } from '@react-three/drei';
import * as THREE from "three";
import gsap from "gsap";

import { useUiStore } from "../../stores/uiStore";

export default function Model(props) {
    const { openPanel } = useUiStore();


  const { nodes } = useGLTF('/models/darktargets.glb');

  const whiteMaterial = new THREE.MeshBasicMaterial({ color: 0xffffff});

  const aboutAnimRef = useRef();
  const skillsAnimRef = useRef();
  const projectsAnimRef = useRef();
  const contactsAnimRef = useRef();

  const animationPairs = {
    "Workstation_Hitbox": {ref:aboutAnimRef},
    "Skills_Hitbox": {ref: skillsAnimRef},
    "Projects_Hitbox": {ref: projectsAnimRef},
    "Contacts_Hitbox": {ref: contactsAnimRef},
  }

  //Handle Hover
  const onHover = (key, isHovering) => {
    const animObject = animationPairs[key];
    gsap.to(animObject.ref.current.scale,{
      x: isHovering ? 1 : 0,
      y: isHovering ? 1 : 0,
      z: isHovering ? 1 : 0,
      duration: 0.5,
    })
  }

  return (
    <group {...props} dispose={null}>
      <mesh 
        geometry={nodes.Workstation_Hitbox.geometry}
        material={nodes.Workstation_Hitbox.material} 
        visible={false}
        position={[0.956, 0.76, 0.955]} 
        scale={[0.951, 0.538, 0.951]}
        onPointerOver={() => {
          onHover("Workstation_Hitbox", true);
          document.body.style.cursor = "pointer";
        }}
        onPointerOut={() => {
          onHover("Workstation_Hitbox", false);
          document.body.style.cursor = "auto";
        }}
        onClick={() => openPanel("Workstation_Hitbox")}
      />
      <mesh 
        ref={aboutAnimRef}
        geometry={nodes.Workstation_Hitbox_Anim.geometry} 
        material={whiteMaterial} 
        position={[0.956, 0.76, 0.955]} 
        scale={[0, 0, 0]} 
      />
      <mesh 
        geometry={nodes.Skills_Hitbox.geometry} 
        material={nodes.Skills_Hitbox.material} 
        visible={false}
        position={[1.595, 1.828, -2.211]} 
        scale={[0.63, 0.895, 0.1]} 
        onPointerOver={() => { 
          onHover("Skills_Hitbox", true);
          document.body.style.cursor = "pointer";
        }}
        onPointerOut={() => { 
          onHover("Skills_Hitbox", false);
          document.body.style.cursor = "auto";
        }}
        onClick={() => openPanel("Skills_Hitbox")}
      />
      <mesh 
        ref={skillsAnimRef}
        geometry={nodes.Skills_Hitbox_Anim.geometry} 
        material={whiteMaterial} 
        position={[1.595, 1.828, -2.293]} 
        scale={[0, 0, 0]} 
      />
      <mesh 
        geometry={nodes.Projects_Hitbox.geometry} 
        material={nodes.Projects_Hitbox.material} 
        visible={false}
        position={[-1.428, 1.828, -2.211]} 
        scale={[0.63, 0.895, 0.1]} 
        onPointerOver={() => {
          onHover("Projects_Hitbox", true);
          document.body.style.cursor = "pointer";
        }}
        onPointerOut={() => {
          onHover("Projects_Hitbox", false);
          document.body.style.cursor = "auto";
        }}
        onClick={() => openPanel("Projects_Hitbox")}
      />
      <mesh 
        ref={projectsAnimRef}
        geometry={nodes.Projects_Hitbox_Anim.geometry} 
        material={whiteMaterial} 
        position={[-1.429, 1.828, -2.225]} 
        scale={[0, 0, 0]} 
      />
      <mesh 
        geometry={nodes.Contacts_Hitbox.geometry} 
        material={nodes.Contacts_Hitbox.material} 
        visible={false}
        position={[-1.776, 0.507, -0.592]} 
        scale={[0.396, 0.298, 0.413]} 
        onPointerOver={() => {
          onHover("Contacts_Hitbox", true);
          document.body.style.cursor = "pointer";
        }}
        onPointerOut={() => {
          onHover("Contacts_Hitbox", false);
          document.body.style.cursor = "auto";
        }}
        onClick={() => openPanel("Contacts_Hitbox")}
      />
      <mesh 
        ref={contactsAnimRef}
        geometry={nodes.Cube.geometry} 
        material={whiteMaterial} 
        position={[-1.776, 0.507, -0.592]} 
        scale={[0, 0, 0]} 
      />
    </group>
  )
}

useGLTF.preload('/darktargets.glb')
